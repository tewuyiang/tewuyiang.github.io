<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>博客主页</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://tewuyiang.github.io/"/>
  <updated>2019-07-24T06:04:59.858Z</updated>
  <id>https://tewuyiang.github.io/</id>
  
  <author>
    <name>特务依昂</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>HttpServlet中service方法的源码分析</title>
    <link href="https://tewuyiang.github.io/HttpServlet%E4%B8%ADservice%E6%96%B9%E6%B3%95%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/"/>
    <id>https://tewuyiang.github.io/HttpServlet中service方法源码解读/</id>
    <published>2019-07-24T03:49:09.000Z</published>
    <updated>2019-07-24T06:04:59.858Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>&ensp;&ensp;&ensp;&ensp;最近在看《Head First Servlet &amp; JSP》这本书，  对servlet有了更加深入的理解。今天就来写一篇博客，谈一谈Servlet中一个重要的方法——<strong>service方法</strong>。</p><br><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>&ensp;&ensp;&ensp;&ensp;当浏览器对servlet发起请求时，web容器会开启一个新的线程，或者是从线程池中分配一个线程，并调用servlet的service（）方法，这个方法不需要程序员编写，而是继承自父类HttpServlet（当然，servlet不一定继承HttpServlet，也可以是实现其它协议的servlet类，但是大部分情况是Http协议）；</p><p>&ensp;&ensp;&ensp;&ensp;在service（）方法中，会查看请求的类型（Get，Post……），根据请求的类型，调用servlet中对应的方法，如doGet（）、doPost（）……下面就来看看HttpServlet类中service（）方法的源码。</p><br><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> ServletException, IOException</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        String method = req.getMethod();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (method.equals(METHOD_GET)) &#123;<span class="comment">//若为Get请求</span></span><br><span class="line">            <span class="keyword">long</span> lastModified = getLastModified(req);</span><br><span class="line">            <span class="keyword">if</span> (lastModified == -<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="comment">// servlet doesn't support if-modified-since, no reason</span></span><br><span class="line">                <span class="comment">// to go through further expensive logic</span></span><br><span class="line">                doGet(req, resp);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">long</span> ifModifiedSince = req.getDateHeader(HEADER_IFMODSINCE);</span><br><span class="line">                <span class="keyword">if</span> (ifModifiedSince &lt; lastModified) &#123;</span><br><span class="line">                    <span class="comment">// If the servlet mod time is later, call doGet()</span></span><br><span class="line">                    <span class="comment">// Round down to the nearest second for a proper compare</span></span><br><span class="line">                    <span class="comment">// A ifModifiedSince of -1 will always be less</span></span><br><span class="line">                    maybeSetLastModified(resp, lastModified);</span><br><span class="line">                    doGet(req, resp);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    resp.setStatus(HttpServletResponse.SC_NOT_MODIFIED);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(METHOD_HEAD)) &#123;</span><br><span class="line">            <span class="keyword">long</span> lastModified = getLastModified(req);</span><br><span class="line">            maybeSetLastModified(resp, lastModified);</span><br><span class="line">            doHead(req, resp);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(METHOD_POST)) &#123;</span><br><span class="line">            doPost(req, resp);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(METHOD_PUT)) &#123;</span><br><span class="line">            doPut(req, resp);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(METHOD_DELETE)) &#123;</span><br><span class="line">            doDelete(req, resp);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(METHOD_OPTIONS)) &#123;</span><br><span class="line">            doOptions(req,resp);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(METHOD_TRACE)) &#123;</span><br><span class="line">            doTrace(req,resp);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//</span></span><br><span class="line">            <span class="comment">// Note that this means NO servlet supports whatever</span></span><br><span class="line">            <span class="comment">// method was requested, anywhere on this server.</span></span><br><span class="line">            <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">            String errMsg = lStrings.getString(<span class="string">"http.method_not_implemented"</span>);</span><br><span class="line">            Object[] errArgs = <span class="keyword">new</span> Object[<span class="number">1</span>];</span><br><span class="line">            errArgs[<span class="number">0</span>] = method;</span><br><span class="line">            errMsg = MessageFormat.format(errMsg, errArgs);</span><br><span class="line"></span><br><span class="line">            resp.sendError(HttpServletResponse.SC_NOT_IMPLEMENTED, errMsg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><br><h2 id="源码解读"><a href="#源码解读" class="headerlink" title="源码解读"></a>源码解读</h2><h3 id="对于Get类型的请求"><a href="#对于Get类型的请求" class="headerlink" title="对于Get类型的请求"></a>对于Get类型的请求</h3><p>&ensp;&ensp;&ensp;&ensp;在上面的源代码中，若请求是Get类型的，那service（）方法首先调用了<strong>getLastModified（）</strong>方法，获取了一个值赋给lastModified变量，这个东西是什么呢？</p><p>&ensp;&ensp;&ensp;&ensp;首先要知道一个东西，叫做<strong>If-Modified-Since</strong>（源码的注释中也有提到），这是Http请求的一个请求头标签，记录的是你现在请求的文件，在上一次你请求的时候，服务器上最后修改它的时间。所以，前提是你之前已经请求过这个文件，浏览器中存有这个页面的缓存，才有这个值。而源码中的<strong>getLastModified（）</strong>方法，就是用来获取这个值的。</p><p>&ensp;&ensp;&ensp;&ensp;对于第一次请求的文件，浏览器请求中是没有<strong>If-Modified-Since</strong>的，所以在上面的源码中，若是第一次请求，<strong>getLastModified（）</strong>返回的是-1，表示是第一次请求，则直接调用doGet方法，获取服务器中的文件，而这时在浏览器中，也获得了请求的文件在服务器中最后被修改的时间；</p><p>&ensp;&ensp;&ensp;&ensp;而对于不是第一次的请求，浏览器会将<strong>If-Modified-Since</strong>通过请求发送到服务器，service（）方法调用<strong>getLastModified（）</strong>方法获取到了发送来的这个值；然后它要判断一件事，那就是在你上次请求到这次请求之间，这个文件在服务器上是否被修改了，若被修改，则调用doGet（），重新获取一次，若没有被修改，则直接使用你浏览器中这个文件的缓存。</p><p>&ensp;&ensp;&ensp;&ensp;那service方法是怎么做到这个操作的呢。看上面的源代码，若<strong>getLastModified（）</strong>方法获取到的值不是-1，则表示你之前请求过这个页面，并在浏览器中有缓存。然后，service（）方法调用<strong><em>req.getDateHeader(HEADER_IFMODSINCE)</em></strong>，获取服务器上，你请求文件的最后修改时间，并与你传来的最后修改时间进行比较（两者都是long类型，表示时间的毫秒值），若<strong>服务器上的最后修改时间 &gt; 你传来的最后修改时间</strong>，则表示在你上次请求之后，这个文件被修改过，所以不能直接使用缓存，于是service（）方法调用doGet（）方法重新获取此文件，而浏览器的缓存以及<strong>If-Modified-Since</strong>也将得到更新；若<strong>服务器上的最后修改时间 == 你传来的最后修改时间</strong>，表示这个文件没有被修改，service（）方法调用<strong><em>resp.setStatus()</em></strong>方法    ，为响应设置状态码304（HttpServletResponse.SC_NOT_MODIFIED == 304），告诉浏览器可以直接使用缓存。</p><h3 id="对于Post类型的请求"><a href="#对于Post类型的请求" class="headerlink" title="对于Post类型的请求"></a>对于Post类型的请求</h3><p>&ensp;&ensp;&ensp;&ensp;对于Post类型的请求，service（）方法都是直接调用doPost（）方法，因为Post请求在标准中被规定用来对服务器中的内容进行修改，所以没有必要考虑缓存（个人理解）。当然，还有其它6种请求，但是基本上不用，我也不是很懂，这里就不说了。</p><br><h2 id="源码下载地址"><a href="#源码下载地址" class="headerlink" title="源码下载地址"></a>源码下载地址</h2><p><a href="http://www.java2s.com/Code/JarDownload/javax.servlet/javax.servlet-api-3.0.1-sources.jar.zip" target="_blank" rel="noopener">http://www.java2s.com/Code/JarDownload/javax.servlet/javax.servlet-api-3.0.1-sources.jar.zip</a></p><br><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="https://www.cnblogs.com/moxiaotao/p/9670109.html" target="_blank" rel="noopener">https://www.cnblogs.com/moxiaotao/p/9670109.html</a></p><p><a href="https://www.2cto.com/kf/201705/638441.html" target="_blank" rel="noopener">https://www.2cto.com/kf/201705/638441.html</a></p><p>《Head First Servlet &amp; JSP》</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;&amp;ensp;&amp;ensp;&amp;ensp;&amp;ensp;最近在看《Head First Servlet &amp;amp; JSP》这本书，  对servl
      
    
    </summary>
    
    
      <category term="Servlet" scheme="https://tewuyiang.github.io/tags/Servlet/"/>
    
  </entry>
  
  <entry>
    <title>根据先序遍历和中序遍历建立二叉树</title>
    <link href="https://tewuyiang.github.io/%E6%A0%B9%E6%8D%AE%E5%85%88%E5%BA%8F%E9%81%8D%E5%8E%86%E5%92%8C%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86%E5%BB%BA%E7%AB%8B%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    <id>https://tewuyiang.github.io/根据先序遍历和中序遍历建立二叉树/</id>
    <published>2019-07-23T14:37:34.000Z</published>
    <updated>2019-07-23T15:15:26.317Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>​    已知一棵二叉树的先序遍历以及中序遍历，重建二叉树。二叉树的每一个节点有三个属性，左子节点，右子节点，以及节点值。   </p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>先序遍历服从规则<strong>“根左右”</strong>，所以由此可知，对于一个先序遍历得到的数组，第一个元素一定是<strong>根节点</strong>；</p><p>中序遍历服从规则<strong>”左根右“</strong>，所以由此可知，对于一个中序遍历得到的数组，根节点左边的元素都属于根节点的<strong>左子树</strong>，而根节点右边的元素都属于根节点的<strong>右子树</strong>；</p><p>所以，我们可以先通过先序遍历的第一个元素确定根节点，然后通过中序遍历结合根节点，获得当前根节点的左右子树，再将子树看成一棵独立的树，继续使用先序遍历判断根节点，中序遍历判断子树的方式，最终建立起整棵树；</p><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p>假设有一棵二叉树，先序遍历为<strong>{1,2,4,7,3,5,6,8}</strong>，中序遍历为<strong>{4,7,2,1,5,3,8,6}</strong>，则建树过程如下：</p><blockquote><p>首先，通过先序遍历可知树的根节点为<strong><em>1</em></strong>，则在中序遍历中，1左边的元素<strong><em>4，7，2</em></strong>即为根的左子树的元素，而<strong><em>1</em></strong>右边的元素<strong><em>5，3，8，6</em></strong>即为根节点的右子树；</p><blockquote><p>对于左子树<strong><em>4，7，2</em></strong>来说，在先序遍历中，这三个点的顺序为<strong><em>2，4，7</em></strong>，则<strong><em>2</em></strong>为根节点，而在中序遍历中，<strong><em>4，7</em></strong>均在<strong><em>2</em></strong>的左边，则<strong><em>4，7</em></strong>均为以<strong><em>2</em></strong>为根树的左子树，且没有右子树；</p><blockquote><p>对于<strong><em>4，7</em></strong>这两个节点来说，先序遍历中，<strong><em>4</em></strong>节点在7节点之前，所以<strong><em>4</em></strong>为根节点，而<strong><em>7</em></strong>作为子树，在中序遍历中，<strong><em>7</em></strong>在<strong><em>4</em></strong>之后，所以<strong><em>7</em></strong>为右子树；</p></blockquote></blockquote><blockquote><p>对于根节点<strong><em>1</em></strong>的右子树<strong><em>5，3，8，6</em></strong>来说，在先序遍历中，<strong><em>3</em></strong>在最前面，所以<strong><em>3</em></strong>为这棵子树的根节点，而在中序遍历中，<strong><em>5</em></strong>在<strong><em>3</em></strong>的左边，所以属于左子树，而<strong><em>8，6</em></strong>在<strong><em>3</em></strong>的右边，属于右子树；</p><blockquote><p>对于根节点<strong><em>3</em></strong>的右子树<strong><em>8，6</em></strong>，在先序遍历中，<strong><em>6</em></strong>在<strong><em>8</em></strong>之前，所以，<strong><em>6</em></strong>又为根节点，而在中序遍历中，<strong><em>8</em></strong>在<strong><em>6</em></strong>的左边，所以<strong><em>8</em></strong>是<strong><em>6</em></strong>的左子节点；</p></blockquote></blockquote></blockquote><p>至此，二叉树便重建完成；</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h4 id="树的节点"><a href="#树的节点" class="headerlink" title="树的节点"></a>树的节点</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> val;<span class="comment">//当前节点的值</span></span><br><span class="line">TreeNode left;<span class="comment">//左子节点</span></span><br><span class="line">TreeNode right;<span class="comment">//右子节点</span></span><br><span class="line"></span><br><span class="line">TreeNode(<span class="keyword">int</span> x) &#123;</span><br><span class="line">val = x;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="建树方法"><a href="#建树方法" class="headerlink" title="建树方法"></a>建树方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* pre：线序遍历得到的数组</span></span><br><span class="line"><span class="comment">* in：中序遍历得到的数组</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> TreeNode <span class="title">reConstructBinaryTree</span><span class="params">(<span class="keyword">int</span>[] pre, <span class="keyword">int</span>[] in)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(pre.length == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> root = pre[<span class="number">0</span>];</span><br><span class="line">    TreeNode node = <span class="keyword">new</span> TreeNode(root);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//寻找根节点在in中的索引</span></span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>( ; i&lt;in.length; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span>(in[i] == root) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//建立左子树</span></span><br><span class="line">    <span class="keyword">int</span>[] leftIn = Arrays.copyOfRange(in, <span class="number">0</span>, i);</span><br><span class="line">    <span class="keyword">int</span>[] leftPre = Arrays.copyOfRange(pre, <span class="number">1</span>, i+<span class="number">1</span>);</span><br><span class="line">    node.left = reConstructBinaryTree(leftPre, leftIn);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//建立右子树</span></span><br><span class="line">    <span class="keyword">int</span>[] rightIn = Arrays.copyOfRange(in, i+<span class="number">1</span>, in.length);</span><br><span class="line">    <span class="keyword">int</span>[] rightPre = Arrays.copyOfRange(pre, i+<span class="number">1</span>, pre.length);</span><br><span class="line">    node.right = reConstructBinaryTree(rightPre, rightIn);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="建树代码（优化）"><a href="#建树代码（优化）" class="headerlink" title="建树代码（优化）"></a>建树代码（优化）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> TreeNode <span class="title">reConstructBinaryTree</span><span class="params">(<span class="keyword">int</span>[] pre, <span class="keyword">int</span>[] in)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> getRootTreeNode(pre, <span class="number">0</span>, pre.length-<span class="number">1</span>, in, <span class="number">0</span>, in.length-<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* preL：当前子树在先序遍历的数组中的起始下标</span></span><br><span class="line"><span class="comment">* preR：当前子树在先序遍历的数组中的结束下标</span></span><br><span class="line"><span class="comment">* inL：当前子树在中序遍历的数组中的起始下标</span></span><br><span class="line"><span class="comment">* inR：当前子树在中序遍历的数组中的起始下标</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> TreeNode <span class="title">getRootTreeNode</span><span class="params">(<span class="keyword">int</span>[] pre, <span class="keyword">int</span> preL, </span></span></span><br><span class="line"><span class="function"><span class="params">                                <span class="keyword">int</span> preR, <span class="keyword">int</span>[] in, <span class="keyword">int</span> inL, <span class="keyword">int</span> inR)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(preL &gt; preR) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    TreeNode node = <span class="keyword">new</span> TreeNode(pre[preL]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=inL; i&lt;=inR; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span>(in[i] == pre[preL]) &#123;</span><br><span class="line"></span><br><span class="line">            node.left = getRootTreeNode(pre, preL+<span class="number">1</span>, preL+i-inL, in, inL, i-<span class="number">1</span>);</span><br><span class="line">            node.right = getRootTreeNode(pre, preL+i-inL+<span class="number">1</span>, preR, in, i+<span class="number">1</span>, inR);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;p&gt;​    已知一棵二叉树的先序遍历以及中序遍历，重建二叉树。二叉树的每一个节点有三个属性，左子节点，右子节点，以及节点值。   &lt;/p&gt;
&lt;
      
    
    </summary>
    
    
      <category term="数据结构" scheme="https://tewuyiang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>我的第一篇Hexo博客</title>
    <link href="https://tewuyiang.github.io/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87hexo%E5%8D%9A%E5%AE%A2/"/>
    <id>https://tewuyiang.github.io/我的第一篇hexo博客/</id>
    <published>2019-07-20T13:21:26.000Z</published>
    <updated>2019-07-20T13:28:13.962Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>随便试试！</p><h2 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h2><p>hello world！</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Hello World!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p>没有</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;随便试试！&lt;/p&gt;
&lt;h2 id=&quot;解释&quot;&gt;&lt;a href=&quot;#解释&quot; class=&quot;headerlink&quot; title=&quot;解释&quot;&gt;&lt;/a&gt;
      
    
    </summary>
    
    
      <category term="测试Hexo博客是否搭建成功" scheme="https://tewuyiang.github.io/tags/%E6%B5%8B%E8%AF%95Hexo%E5%8D%9A%E5%AE%A2%E6%98%AF%E5%90%A6%E6%90%AD%E5%BB%BA%E6%88%90%E5%8A%9F/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://tewuyiang.github.io/hello-world/"/>
    <id>https://tewuyiang.github.io/hello-world/</id>
    <published>2019-07-20T13:16:12.966Z</published>
    <updated>2019-07-20T13:16:12.967Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
