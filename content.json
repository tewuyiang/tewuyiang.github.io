{"meta":{"title":"博客主页","subtitle":null,"description":"一个未来程序员的博客~~~","author":"特务依昂","url":"https://tewuyiang.github.io","root":"/"},"pages":[{"title":"categories","date":"2019-07-20T14:43:46.000Z","updated":"2019-07-20T14:44:07.624Z","comments":false,"path":"categories/index.html","permalink":"https://tewuyiang.github.io/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2019-07-20T14:37:51.000Z","updated":"2019-07-20T14:42:50.692Z","comments":false,"path":"tags/index.html","permalink":"https://tewuyiang.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"根据先序遍历和中序遍历建立二叉树","slug":"根据先序遍历和中序遍历建立二叉树","date":"2019-07-23T14:37:34.000Z","updated":"2019-07-23T15:15:26.317Z","comments":true,"path":"根据先序遍历和中序遍历建立二叉树/","link":"","permalink":"https://tewuyiang.github.io/根据先序遍历和中序遍历建立二叉树/","excerpt":"","text":"问题​ 已知一棵二叉树的先序遍历以及中序遍历，重建二叉树。二叉树的每一个节点有三个属性，左子节点，右子节点，以及节点值。 思路先序遍历服从规则“根左右”，所以由此可知，对于一个先序遍历得到的数组，第一个元素一定是根节点； 中序遍历服从规则”左根右“，所以由此可知，对于一个中序遍历得到的数组，根节点左边的元素都属于根节点的左子树，而根节点右边的元素都属于根节点的右子树； 所以，我们可以先通过先序遍历的第一个元素确定根节点，然后通过中序遍历结合根节点，获得当前根节点的左右子树，再将子树看成一棵独立的树，继续使用先序遍历判断根节点，中序遍历判断子树的方式，最终建立起整棵树； 例子假设有一棵二叉树，先序遍历为{1,2,4,7,3,5,6,8}，中序遍历为{4,7,2,1,5,3,8,6}，则建树过程如下： 首先，通过先序遍历可知树的根节点为1，则在中序遍历中，1左边的元素4，7，2即为根的左子树的元素，而1右边的元素5，3，8，6即为根节点的右子树； 对于左子树4，7，2来说，在先序遍历中，这三个点的顺序为2，4，7，则2为根节点，而在中序遍历中，4，7均在2的左边，则4，7均为以2为根树的左子树，且没有右子树； 对于4，7这两个节点来说，先序遍历中，4节点在7节点之前，所以4为根节点，而7作为子树，在中序遍历中，7在4之后，所以7为右子树； 对于根节点1的右子树5，3，8，6来说，在先序遍历中，3在最前面，所以3为这棵子树的根节点，而在中序遍历中，5在3的左边，所以属于左子树，而8，6在3的右边，属于右子树； 对于根节点3的右子树8，6，在先序遍历中，6在8之前，所以，6又为根节点，而在中序遍历中，8在6的左边，所以8是6的左子节点； 至此，二叉树便重建完成； 代码树的节点123456789public class TreeNode &#123; int val; //当前节点的值 TreeNode left; //左子节点 TreeNode right; //右子节点 TreeNode(int x) &#123; val = x; &#125;&#125; 建树方法1234567891011121314151617181920212223242526272829303132/*** pre：线序遍历得到的数组* in：中序遍历得到的数组*/public TreeNode reConstructBinaryTree(int[] pre, int[] in) &#123; if(pre.length == 0) &#123; return null; &#125; int root = pre[0]; TreeNode node = new TreeNode(root); //寻找根节点在in中的索引 int i = 0; for( ; i&lt;in.length; ++i) &#123; if(in[i] == root) &#123; break; &#125; &#125; //建立左子树 int[] leftIn = Arrays.copyOfRange(in, 0, i); int[] leftPre = Arrays.copyOfRange(pre, 1, i+1); node.left = reConstructBinaryTree(leftPre, leftIn); //建立右子树 int[] rightIn = Arrays.copyOfRange(in, i+1, in.length); int[] rightPre = Arrays.copyOfRange(pre, i+1, pre.length); node.right = reConstructBinaryTree(rightPre, rightIn); return node;&#125; 建树代码（优化）1234567891011121314151617181920212223242526272829public TreeNode reConstructBinaryTree(int[] pre, int[] in) &#123; return getRootTreeNode(pre, 0, pre.length-1, in, 0, in.length-1);&#125;/*** preL：当前子树在先序遍历的数组中的起始下标* preR：当前子树在先序遍历的数组中的结束下标* inL：当前子树在中序遍历的数组中的起始下标* inR：当前子树在中序遍历的数组中的起始下标*/public TreeNode getRootTreeNode(int[] pre, int preL, int preR, int[] in, int inL, int inR) &#123; if(preL &gt; preR) &#123; return null; &#125; TreeNode node = new TreeNode(pre[preL]); for(int i=inL; i&lt;=inR; ++i) &#123; if(in[i] == pre[preL]) &#123; node.left = getRootTreeNode(pre, preL+1, preL+i-inL, in, inL, i-1); node.right = getRootTreeNode(pre, preL+i-inL+1, preR, in, i+1, inR); break; &#125; &#125; return node;&#125;","categories":[],"tags":[{"name":"数据结构","slug":"数据结构","permalink":"https://tewuyiang.github.io/tags/数据结构/"}]},{"title":"我的第一篇Hexo博客","slug":"我的第一篇hexo博客","date":"2019-07-20T13:21:26.000Z","updated":"2019-07-20T13:28:13.962Z","comments":true,"path":"我的第一篇hexo博客/","link":"","permalink":"https://tewuyiang.github.io/我的第一篇hexo博客/","excerpt":"","text":"介绍随便试试！ 解释hello world！ 代码12345public class HelloWorld&#123; public static void main(String[] args)&#123; System.out.println(\"Hello World!\"); &#125;&#125; 参考文献没有","categories":[],"tags":[{"name":"测试Hexo博客是否搭建成功","slug":"测试Hexo博客是否搭建成功","permalink":"https://tewuyiang.github.io/tags/测试Hexo博客是否搭建成功/"}]},{"title":"Hello World","slug":"hello-world","date":"2019-07-20T13:16:12.966Z","updated":"2019-07-20T13:16:12.967Z","comments":true,"path":"hello-world/","link":"","permalink":"https://tewuyiang.github.io/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}